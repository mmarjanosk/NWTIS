/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.foi.nwtis.dkermek.konfiguracije;

import java.util.Enumeration;
import java.util.Properties;

/**
 *
 * @author Dragutin Kermek
 */
public abstract class KonfiguracijaApstraktna implements Konfiguracija {

    protected String datoteka;
    protected Properties postavke;

    public KonfiguracijaApstraktna(String datoteka) {
        this.datoteka = datoteka;
        postavke = new Properties();
    }

    @Override
    public void dodajKonfiguraciju(Properties postavke) {
        for (Enumeration e = postavke.keys(); e.hasMoreElements();) {
            String k = (String) e.nextElement();
            String v = postavke.getProperty(k);
            this.postavke.put(k, v);
        }
    }

    @Override
    public void kopirajKonfiguraciju(Properties postavke) {
        this.obrisiSvePostavke();
        this.dodajKonfiguraciju(postavke);
    }

    @Override
    public Properties dajSvePostavke() {
        return this.postavke;
    }

    @Override
    public boolean obrisiSvePostavke() {
        if (this.postavke.isEmpty()) {
            return false;
        } else {
            this.postavke.clear();
            return true;
        }
    }

    @Override
    public String dajPostavku(String postavka) {
        return this.postavke.getProperty(postavka);
    }

    @Override
    public boolean spremiPostavku(String postavka, String vrijednost) {
        if(this.postavke.containsKey(postavka)) {
            return false;
        } else {
            this.postavke.put(postavka, vrijednost);
            return true;
        }
    }

    @Override
    public boolean azurirajPostavku(String postavka, String vrijednost) {
        if(! this.postavke.containsKey(postavka)) {
            return false;
        } else {
            this.postavke.put(postavka, vrijednost);
            return true;
        }
    }

    @Override
    public boolean postojiPostavka(String postavka) {
        return this.postavke.containsKey(postavka);
    }

    @Override
    public boolean obrisiPostavku(String postavka) {
        if(! this.postavke.containsKey(postavka)) {
            return false;
        } else {
            this.postavke.remove(postavka);
            return true;
        }
    }
    
    public static Konfiguracija kreirajKonfiguraciju(String datoteka) throws NemaKonfiguracije, NeispravnaKonfiguracija {
        if(datoteka == null || datoteka.length() == 0) {
            throw new NemaKonfiguracije("Neispravno ime datoteke.");
        }
        if(datoteka.toLowerCase().endsWith(".txt")) {
            return new KonfiguracijaTxt(datoteka);
        } else if(datoteka.toLowerCase().endsWith(".xml")) {
            return new KonfiguracijaXML(datoteka);
        } else if(datoteka.toLowerCase().endsWith(".bin")) {
            return new KonfiguracijaBin(datoteka);
        } else {
           throw new NeispravnaKonfiguracija("Nepoznata vrsta konfiguracije."); 
        }
    }
    
    public static Konfiguracija preuzmiKonfiguraciju(String datoteka) throws NemaKonfiguracije, NeispravnaKonfiguracija {
        if(datoteka == null || datoteka.length() == 0) {
            throw new NemaKonfiguracije("Neispravno ime datoteke.");
        }
        if(datoteka.toLowerCase().endsWith(".txt")) {
            KonfiguracijaTxt ktxt = new KonfiguracijaTxt(datoteka);
            ktxt.ucitajKonfiguraciju();
            return ktxt;
        } else if(datoteka.toLowerCase().endsWith(".xml")) {
            KonfiguracijaXML kxml = new KonfiguracijaXML(datoteka);
            kxml.ucitajKonfiguraciju();
            return kxml;
        } else if(datoteka.toLowerCase().endsWith(".bin")) {
            KonfiguracijaBin kbin = new KonfiguracijaBin(datoteka);
            kbin.ucitajKonfiguraciju();
            return kbin;
        } else {
           throw new NeispravnaKonfiguracija("Nepoznata vrsta konfiguracije."); 
        }        
    }
}
